" shout-out to http://dougblack.io/words/a-good-vimrc.html
"Runtime" {{{
 
" what is the name of the directory containing this file?
let s:portable = expand('<sfile>:p:h')

" Isolate the runtime to the current directory
let &runtimepath = printf('%s,%s/vim81', s:portable, s:portable)
"Runtime" }}}
" Include {{{
set nocompatible
runtime default.vim
" Include }}}
"Folding" {{{
set foldenable
set foldnestmax=10
set foldlevel=0
set foldmethod=marker
" }}}
"Colors & Syntax" {{{
" Setup term color support. This assumes color support of some kind
set termguicolors

syntax enable
set background=dark
colorscheme solarized
" }}}
"Movement" {{{
" move visually
nnoremap j gj
nnoremap k gk
" highlight last inserted text
nnoremap gv `[v`]
nnoremap t gt
nnoremap T gT

set mouse=a
" }}}
"Tabstop" {{{
set tabstop=4 " number of spaces tabs are visually
set expandtab " tabs are spaces. annoying when editing python
" allow backspace after insert mode
set bs=2
" }}}
"UI Config" {{{
set nonumber            " hide line numbers
set wildmenu            " visual autocomplete for command menu

set lazyredraw          "redraw only when we need to
set showcmd             " shows the previously used command
set showmatch           " highlight matching [{()}]

" visual bell off
set noerrorbells
set novisualbell
set t_vb=
set tm=500
set incsearch           " search as characters are entered
set hlsearch            " highlight matches

set noswapfile          " turn off swap files
" }}}
"History" {{{
" persistent undo
let undodir=printf("%s/undodir/", s:portable)
exe "set undodir=".undodir
call mkdir(undodir, 'p')
set undofile
set history=700
" Tell vim to remember certain things when we exit
"  '10  :  marks will be remembered for up to 10 previously edited files
"  "100 :  will save up to 100 lines for each register
"  :20  :  up to 20 lines of command-line history will be remembered
"  %    :  saves and restores the buffer list
set viminfo='10,\"100,:20,%

" allow vim to write to non exisistent directories by recursively creating the needed directories
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END


" restore the cursor to where it was the last time we edited this file
function! ResCur()
  if line("'\"") <= line("$")
    normal! g`"
    return 1
  endif
endfunction

augroup resCur
  autocmd!
  autocmd BufWinEnter * call ResCur()
augroup END
" }}}
"Keymapping" {{{
let mapleader=";"

" Fold: close fold
nnoremap <leader>f zc

" Down: move to the next tab
nnoremap <leader>j :tabn<CR>

" Up: move to the previous tab
nnoremap <leader>k :tabp<CR>

" }}}
"Status Line" {{{
" make sure it is tmux aware
"Status Line" }}}
"Terminal" {{{
" check to see if we have a terminal
if has('termainal')
    set termwinkey=CTRL-W
endif
"Terminal" }}}
