# comments start with '#'
# source is always UTF-8

## numbers
1       # 1     integers are numbers
1.2     # 1.2   floats/doubles/etc are also numbers. there is generally no distinction.
/0      # /0    infinity. this is a number literal, not a divide by zero.
0xa     # 10    hex numbers ok

# unary math operators
- 8     # -8    unary minus inverts
+ -8    # 8     unary plus is the absolute value
_ -1.2  # -2    floor (so _/0 is the largest integer)

# binary math operators
1 + 1   # 2
8 - 1   # 7
10 * 2  # 20
11 / 2  # 5.5   integers are converted to floats as needed
11 // 2 # 5     divide then floor aka integer divide
10 !/ 3  # 1     mod
5 ^ 2   # 25    exponent
9 /^ 3  # 2     log
2 + 3 * 2^2 - 14  # 0   normal operator precedence

# comparisons
1 /= 8  # 0     test that values are equal
1 /< 8  # 1     less than
8 /> 8  # 0     greater than
1 != 8  # 1     not equal
8 !< 8  # 1     not less than (greater or equal)
8 !> 8  # 1     not greater than (less or equal)

# boolean logic
# use 0 and 1 for 'boolean' values
!8      # 0     not
0 /+ 8  # 1     or
0 /* 1  # 0     and
1 /- 1  # 0     xor
0 !+ 8  # 1     nor
0 !* 1  # 0     nand
1 !- 1  # 0     xnor

# nil
# an empty block, or 'nil', is an expression used to indicate no value.
# nil is not a value. Let me repeat that. Nil is an expression, but is not a value and does not return a value.
()      # error!    evaluating nil is an error because it does not return a value
/!()    # 0         if the expression is nil return 0, otherwise return 1
# more about blocks later

# strings
'strings use single quotes only'
'strings can' + ' be appended'
'you can escape \'single quotes\'' + '\n newlines\n' + 'and \\ backslashes'

# range iterator
# heres a few concepts at once

# lists
# lists contain values, separated by commas.
# a list cannot contain nil, because nil is not a value.
[ 'a', 'b', 'c' ]
[ 1, 2, 3, 4, 5 ]

[1..6]  # [ 1, 2, 3, 4, 5 ] the second example can also be written with a range.
[ ..3]  # [ 0, 1, 2 ]       the defalt start and end values are `0` and `_ ∞`
[-1..]  # [ -1, 0, 1, ...]  ∞ is the largest number, so _ ∞ is the largest integer
[3..3]  # []

# append lists like strings
[1..3] + [4..6]  # [ 1, 2, 4, 5 ]
# or use the literal form
[1..3, 4..6]  # [ 1, 2, 4, 5 ]

# lists can be indexed (from zero)
[1..5][0] # 1
# negative indexes are ok
[1..5][-1] # 4
# slicing is the same
[1..5][2, 3]    # [3, 4]
[1..5][-2, -1]  # [3, 4]
[1..5][-2..]    # [3, 4]

# range
# the `..` syntax is syntactic sugar for a range.
0..5    # *range(0, 5)
<start = 0, stop = /0> # this is the signature of range
`\.\.` → <start = 0>$<stop = /0>:(
    (start, stop) @= _
    start != stop @ (
        yield start
        start += 2 * (start /< stop) - 1
    )
)

# blocks
# a block is a list of expressions separated by commas and/or newlines
# it isn't evaluated until it is cast as another type (including typ)
# this means that you can inspect the AST pretty directly but its an advanced technique.
# when evaluated, all expressions are evaluated in order (unless they're also blocks)
# until the end is reached or there is a return statement.
# The if there is no explicit return, the value of the last expression is returned.
'' + ('a', '')  # ''
'' + (
    'a'
    # comments and empty internal lines are ok

    ''
)               # ''
'' + (
    # return early
    >> ''
    'this is never reached'
)               # ''
# evaluating nil (the empty block) is an error because it cannot return a value.
'' + ()         # error!


# pair
# a pair always has two values and has special behavior when used as an item in a set.
'a': 3         # ('a': 3)
('a': 3)[0]    # 'a'        can be indexed like a list
('a': 3)[1]    # 3
'a' : ()       # ()         neither value can be nil, nil is not a value


# set
{}              # the empty set
{1, 2, 3..5}    # {1, 2, 3, 4}  similar literal syntax to lists
{4, 5, 5, 5}    # {4, 5}        sets contain only the last copy of each key that is inserted.
{4, 5, 5: 'a'}  # {4, 5: 'a'}   pair are only judged on their first element for insertion
{1, ()}         # {1}           sets cannot contain nil
{..5}[3]        # 3             indexing usually returns the key used for indexing
{..5}[8]        # ()            unless the key isn't in the set, then nil is returned
{5:'a'}[5]      # 'a'           or the value is a pair, in which case the second element is returned.
# check to see if a set contains a 5 (equivalent to set.has_key() in many languages)
{5}[5] != ()    # 1     it does

# names
# aka variables
x = 3       # 3     assign 3 to x.
x = ()      # ()    unset x, using x without redeclaring it is an error. nil is not a value.
x num = 3   # 3     explicitly declare x as a real number
x += 1      # 4     inplace op `name X= value` is always equivalent to `name = name X value`

# iterators and unpacking
[a, b, c] = [0..3] # unpacking assignment. `a <- 0` `b <- 1` `c <- 2`
a, b, c = 0..3     # the `..` syntax is really just sugar for a range iterator ie `α..ω <-> *range(α, ω)`
a, b = 0..3        # this fails though, because the number of arguments don't match
a, *b = 0..3       # use an explicit iterator on the name side `a <- 0` `b <- [1..3]`


# control flow

## branch
# branch (aka '?') has the following form `{condition} ? {block}`
# when the right side is a pair, '?' acts like a simple if/else statement
1 ? 2: ('a' + 'b')        # 2     short circuit so `('a' + 'b')` isn't evaluated

# the default value (right side/else clause) may be omitted only if the return value is being discarded
0 ? 'never evaluated'       # this is ok.
3 + (0?'never returned')    # error!

# when a block is expected on the right side (as is the case for '?') parenthesis can be omitted.
# in that case, the indentation is use to determine where the end of the block goes, like python.
0 ?
    'this isn\'t returned'
    'this would be returned if the condition was truthy'
    # as an exception, the pair literal can be split across lines like this when used in control flow
    :
    'this is returned'

# when the right side is a block of pairs it acts as a case statement.
'a' ? (
    'a': 'this is returned'
    'b': 'this isn\'t'
    # this is a bit of a special case for '?' since `():...` is not a valid pair
    : 'default'
)
'hmm' ?
    1: 'never run'
    3: 'nope'
    : 'this is returned'

## loop
# loop (aka '@') has a few forms
# it is an operator that takes two blocks. so the base form is `blk @ blk`
# if left is nil, the right hand side is evaluated until it returns falsey (a do-while loop), then the loop exits.
# if left is an iterable it is evaled once and consumed rather than re-evaluated.
# the loop will exit when the iterator is consumed (maybe never).
# otherwise left is taken to be a condition and is evaluated at the top of each loop, exiting if falsey.
# A value is emitted each time through through loop unless nil is returned.
#
# to recap
# () @ (...)    # do-while, if used as an iterator only the last value can be falsey
# itr @ <x>:(x !< 3 ? x)    # filter out values less than 3
# itr @ <x>:(x+2)           # map x-> x + 2
# if it is an iterator. the iterator is consumed and the right block evaluated.cast as an iterator, if that fails it is understood to be a condition.
# `{blk} @` behaves like a do-while loop. the loop breaks when the block evals falsey
# `itr @ fun` is a for/map/filter
# `itr @ op` is a reduce
# `blk @ blk` is a while loop. first the left block tries to cast to an iterator, if that fails
#
# {iterable} 
# `@ {names} /= : {block}` behaves like a for loop
# this is like 'while True: break`
`@` ← <*data block, *, b block>:(...)
1 @     # 1 is lifted to an iterator cycle(1) that emits 1 forever
    >>  # break
    <<  # continue, but we never get here because of the break

# map
# 
[5, 8, 1] @ print   # prints 5, then 8, then 1
..1 @ print         # prints 0

x = [5, 8, 0]
x = x @ /+          
x @= /+             #


## try
# try (aka %)
%
    undefined_var
    error: echo error
    : 'finally'

## coroutine
# pipe (aka |)
result |
    'three' >>
    'two' >>
    'one' >>
count << result     # 'three'
count << result     # 'two'
count << result     # 'one'


# functions
# this is a function of zero arguments, aka a block.
f = (3)
# it is implicitly called when a value is expected.
# or it can be called explicitly like this.
f()         # 3
# this is a function of one argument.
f = <x>:(x + 3)
f(7)        # 10
# this is also a function of one argument.
# the pattern <x, y> is used to match against the argument
f = <x, y>:(x + y)
f(7, 3)    # 10
# this is similar to writing <b>:((x,y) = b; x + y)
# this is an operator, which means it takes an argument on the left and right
f = <x>$<y>:(x + y)
7 f 3   # 10

# aliases
y <-> x     # 3     alias y to x. One side must contain exactly one undeclared variable
y           # 3
y += 1      # 5     an alias is a bi-directional update
y = x       # 1     this is always true when `y <-> x`
x = ()      # ()    alias is removed, x is unavailable, but `y = 5` still
y <-> 2 * x # 5     aliases can contain reversible functions only.
x           # 2.5
x = 3
y           # 6

