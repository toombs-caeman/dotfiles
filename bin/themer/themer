#!/usr/bin/env python3
import colorpicker as color
import yaml
import jinja2 as jj
import os

source_dir = os.path.dirname(os.path.abspath(__file__))

warning ='DO NOT EDIT!! This file was templated with themer.'
# as a fallback, use the solarized theme
fallback = [ '073642', 'dc322f', '859900', 'b58900', '268bd2', 'd33682', '2aa198', 'eee8d5',
    '002b36', 'cb4b16', '586e75', '657b83', '839496', '6c71c4', '93a1a1', 'fdf6e3' ]

def get_raw_colors(filename):
    c = color.isolate_colors(filename, 16)
    c = color.dedupe(c)
    c = color.get_xcolors(c)
    return c
# TODO use ensure_value to make sure the lights are light and the darks are dark
# print(c)

def get_conf(tmplfile = "/themes.yml"):
    with open(source_dir + "/themes.yml", 'r') as stream:
        return yaml.safe_load(stream)

if __name__ == "__main__":
    colors = get_raw_colors('/home/ubernormal/Pictures/Backgrounds/celeste.png')

    # convert rgb tuples to hex codes
    hexcodes = []
    for c in colors:
        hexcodes.append('%02x%02x%02x' % c)

    # print(hexcodes)
    conf = {}
    try:
        conf = get_conf()
    except yaml.YAMLError as ex:
        print(exc)
        exit(1)

    tmplLoader = jj.FileSystemLoader(conf['template_dir'])
    jjenv = jj.Environment(autoescape=True, loader=tmplLoader)
    for name, dest in conf['templates'].items():
        template = jjenv.get_template(name)
        output = template.render(color=hexcodes, msg=warning)
        with open(conf['output_dir'] + "/" + dest, "w") as f:
            f.write(output)
