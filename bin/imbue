#!/sbin/nu

use std null-device
use std log

# TODO:
# * bring in pywal or color thief
# * pull all configuration, path expansion and defaulting into setup
# * ? support wallpapers from https://unsplash.com/developers

const VERSION = '0.0.2'
const defaultpath = "~/.config/imbue/config.yaml" | path expand
export-env {
    $env.NU_LOG_FORMAT = '%ANSI_START%%LEVEL%| %MSG%%ANSI_STOP%'
}

# print the version
def 'main version' [] { $VERSION }

# an all-in-one system configurator tool
#
# the default action is to render dotfiles
# The tool won't overwrite files that weren't previously rendered by it.
def main [
    --config(-c):string # configuration file
    --install(-i)       # install commands
    --force(-f)         # always write files
] {
    let config = setup $config
    if $install {
        if ($config.installer | is-empty) {
            log critical 'no installer configured'
            exit 2
        }
        let packages = $config.commands.package | compact |  str join ' '
        if ($packages != '') { 
            let cmd = $"($config.installer) ($packages)"
            log info $cmd
            nu -c $cmd
        }
    }
    # set wallpaper
    if ($config.wallpaper? | is-empty) {
        __wall_random $config
    } else {
        main wall set ($config.wallpapers | path join $config.wallpaper)
    }

    # resolve theme
    let theme_path = (if ($config.theme? | is-empty) {
        let theme_path = ls $config.themes |
            where type == 'file' |
            get (random int ..(($in|length) - 1)) |
            get name
        log info $'random theme: ($theme_path | path basename)'
        $theme_path
        } else {
        $config.themes | path join  $config.theme
    })
    let theme = openTheme $theme_path

    let changes = $config.commands | compact files | par-each {|command|
        # don't process commands which aren't installed
        if (which $command.name | is-empty) { return }
        let changes = $command.files | par-each {|render|
            let oldhash = ($config.state | get -o $render.to)
            # skip rendering a file if the destination has an unexpected hash
            if not $force and ($render.to | path exists) {
                if (open $render.to | hash md5) != $oldhash {
                    log warning $'destination ($render.to) has unrecognized changes. skipping'
                    return
                }
            }
            if not ($render.from | path exists) {
                log warning $'template ($render.to|path basename) not found. skipping'
                return
            }
            try {
                # render file
                let rendered = open $render.from | render $theme
                let newhash = ($rendered | hash md5)

                # don't write the file if it hasn't changed
                if $newhash != $oldhash or $force {
                    log info $'($render.from | path basename) => ($render.to)'
                    # write file
                    mkdir ($render.to | path dirname)
                    $rendered | save -f $render.to

                    # record hash
                    return {$render.to: $newhash}
                } else {
                    log debug $'no change: ($render.to)'
                }
            } catch {|err|
                log warning $'render of "($render.from|path basename)" failed because of tag ($err.json | from json | get msg)'
                return {}
            }
        } | reduce -f {} {|it acc|
            log debug $'($it | describe) ($acc | describe)'
            $acc|merge $it}
        # wrap up with any callback
        if ($changes | is-not-empty) and ($command.callback | is-not-empty) {
            log debug $'callback: ($command.callback)'
            nu -c $command.callback | complete
        }
        return $changes
    } | reduce -f {} {|it acc|
        log debug $'($it | describe) ($acc | describe)'

        $acc|merge $it}


    # save changed state
    if ($changes | is-not-empty) {
        $config.state | merge $changes | to yaml | save -f $config.statepath
    }
}

# render on write
def "main watch" [
    --config(-c):string # configuration file
] {
    cd (setup $config).templates # don't shadow $config here, just cd
    watch '.' {|op| if $op != 'Remove' { main --config $config }}
}

# use the given configuration by default.
#
# This installs a stub at the default configuration path pointing to the given file.
# The real config file can then be stored under version control.
def "main with" [config:string] {
    mkdir ($defaultpath | path expand | path dirname)
    {redirect:($config|path expand)}|to yaml | save -f $defaultpath
    main
}


# open config file and expand all paths
def --env setup [$configpath] {
    # determine which config we should use
    let configpath = $configpath | default $defaultpath | path expand
    mut config = {
        configpath: $configpath
        statepath: ($configpath | path parse | update extension 'state' | path join)
    }
    log debug $'config: ($config.configpath)'
    log debug $'state: ($config.statepath)'
    $config.state = try { open $config.statepath | from yaml } catch { {} }

    # if redirect to another file if requested.
    # this is so that we can have a stub at the default configuration
    # and then redirect to where our actual configuration is kept under version control
    # the state file is not redirected in the same way, since it shouldn't be under vcs
    mut userdata = {}
    try {
        $userdata = open $config.configpath
    } catch {
        error make {
            msg: "Configuration file not found."
            label: { text: $configpath span: (metadata $configpath).span }
            help: "Did you mean to pass --config?"
        }
    }
    if ($userdata.redirect? | is-not-empty) and ($userdata.redirect | path exists) {
        log debug $'redirect: ($userdata.redirect)'
        $config.configpath = $userdata.redirect
        $userdata = open $config.configpath
    }
    $config = $config | merge $userdata

    # paths are expanded relative to the current directory
    # we want to expand paths relative to the actual config file
    cd ($config.configpath | path dirname)
    $config.templates = $config.templates | path expand
    $config.themes = $config.themes | path expand
    $config.wallpapers = $config.wallpapers | path expand

    # config file templates are relative to $config.templates
    cd $config.templates
    let templates = $config.templates

    # expand dotfile paths
    $config.commands = $config.commands | transpose name data | flatten data |
        default null callback |
        default {} files | update files {|v|$v.files| transpose from to |
            update from {|f|$templates | path join $f.from|path expand} |
            update to {|f|$f.to| path expand}
    }

    return $config
}

# render data into a template
def render [data] {
    let t0 = $in
    $in | parse -r '(?:^|[^{])(?<tag>\{\{(?<content>[^{}](?:[^}]|\}[^}])*)\s*}})' |
        uniq |
        reduce -f $t0 {|tag text|
            try {
                $text | str replace -a $tag.tag ($data | get $tag.content)
            } catch {|err|
                error make -u {
                    msg: $'($tag.tag), ($err.json | from json | get labels.0.text)'
            }}
        }
}

def openTheme [theme] {
    let t = open $theme | lines
    {
        bin:    $env.FILE_PWD
        imbue:  $env.CURRENT_FILE

        color0:     $t.0
        color1:     $t.1
        color2:     $t.2
        color3:     $t.3
        color4:     $t.4
        color5:     $t.5
        color6:     $t.6
        color7:     $t.7
        color8:     $t.8
        color9:     $t.9
        color10:    $t.10
        color11:    $t.11
        color12:    $t.12
        color13:    $t.13
        color14:    $t.14
        color15:    $t.15

        foreground: $t.16
        background: $t.17
        cursor:     $t.18

        black:      $t.0    light_black:    $t.8
        red:        $t.1    light_red:      $t.9
        green:      $t.2    light_green:    $t.10
        yellow:     $t.3    light_yellow:   $t.11
        blue:       $t.4    light_blue:     $t.12
        magenta:    $t.5    light_magenta:  $t.13
        cyan:       $t.6    light_cyan:     $t.14
        white:      $t.7    light_white:    $t.15
    }
}

# raise nicer errors if an external command is missing
def require [...external:string] {
    let missing = $external | where {|cmd| which $cmd | is-empty}
    if ($missing | is-not-empty) {
        error make {
            msg: $'missing: ($missing|str join ", ")'
            label: {
                text: 'external commands not found.'
                span: (metadata $external).span
            }
            help: $'sudo pacman -S ($missing | str join " ")'
        }
    }
}

##############
# WALLPAPERS #
##############

# show active wallpapers
def 'main wall' [] {
    if not (which hyprctl | is-empty) {
        hyprctl hyprpaper listactive | parse -r '(?m)^(?<monitor>[^ ]*) = (?<wall>.*)$'

    }
}

# download wallpapers from wallhaven
#
# wallpapers:
# wallhaven:
#   username:
#   collection: Default
def 'main wall haven' [
    apikey:string
    --config(-c):string # configuration file
] {
    let config = setup $config
    let username = $config.wallhaven.username
    let collection = $config.wallhaven.collection? | default 'Default'
    let walldir = $config.wallpapers

    # user collection
    let collections = http get $'https://wallhaven.cc/api/v1/collections?apikey=($apikey)' | get data
    let col_id = $collections | where label == $collection | get 0.id

    # already downloaded files
    let memo = glob ($walldir ++ '/*') | path parse | get stem

    http get $'https://wallhaven.cc/api/v1/collections/($username)/($col_id)?apikey=($apikey)' |
        get data |
        select id path |
        where {|img| $img.id not-in $memo} | # don't download stuff we already have
        each {|img| # do download
            let file = {
                parent: $walldir
                stem: $img.id
                extension:($img.path | path parse | get extension)
            } | path join
            log info $img.id
            http get $img.path | save $file
        } | ignore
}

# set wallpaper
def 'main wall set' [file:string] {
    if not (which hyprctl | is-empty) {
        hyprctl hyprpaper reload ,($file) | complete | ignore
    }
}

# set random wallpaper
def 'main wall random' [
    --interval(-i)=0sec # if >0, update every interval
    --config(-c):string # configuration file
] {
    if ($interval > 0sec) { loop {
        __wall_random (setup $config)
        sleep $interval
    }}
    __wall_random (setup $config)
}

def __wall_random [config] {
    main wall set (ls $config.wallpapers |
        where type == 'file' |
        get name |
        get (random int ..(($in|length) - 1))
    )
}

# download music
def 'main music' [
    --config(-c):string # configuration file
] {
    let config = setup $config
    let dir = $config.music | expand
    let output = $dir | path join '%(title)s.%(ext)s'
    let archive = $dir | path join 'download-archive.txt'

    # TODO --cookies-from-browser ??
    $config.ytdlp | each {|playlist|
        print $playlist
        try {
            yt-dlp --yes-playlist --extract-audio --embed-metadata -f bestaudio/best --audio-format mp3 --audio-quality 0 --restrict-filenames -o $output --ignore-errors --no-overwrites --download-archive $archive --extractor-arg "youtube:player_client=web_music" -- $playlist
        }
    }
}
