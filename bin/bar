#!/usr/bin/env nu

# TODO: sections
# * wifi / ethernet
# * for inspiration on new sections
#   * starship https://starship.rs/config/

# print a status bar
#
# like [sway-bar](https://man.archlinux.org/man/sway-bar.5)
# or [i3bar](https://i3wm.org/i3bar/manpage.html)
# but written in a real language
def main [] {
        loop {
                print $'(music) (volume) (time) (battery)'
                sleep 1sec
        }
}

def volume [] {
        let status = wpctl get-volume @DEFAULT_AUDIO_SINK@ |
                parse -r '(?<volume>[.\d]+)(?<mute> \[MUTED\])?'
        # a playing speaker or a muted speaker
        if  $status.mute.0 == '' {
                $' (100 * ($status.volume.0 | into float))%'
        } else { ' --%' }
}

def music [] {
        # two eight notes or a quarter rest
        if (mpc status '%state%') == 'playing' {
                $'(mpc current) '
        } else { '󰽺' }
}

# battery info supplied by kernel battery.h
# TODO: what happens when no battery exists?
let battery = (glob '/sys/class/power_supply/BAT*' | first)
# percent full
let battery_charge = $battery ++ '/capacity'
let glyph_charge = '󰂎󰁺󰁻󰁼󰁽󰁾󰁿󰂀󰂁󰂂󰁹' | split chars # battery filling glyphs
# Full Charging Discharging etc. 
let battery_plugged = ['charging' 'full']
let battery_charging = $battery ++ '/status'
def battery [] {
        let charge = $glyph_charge | get ((open $battery_charge | into int) // 10)
        let status = open $battery_charging | str downcase | str trim --char "\n"
        # lightning glyph or space
        let charging = (if ($battery_plugged | any {|x|$x == $status}) { '󱐋' } else { ' ' })
        $'($charge)($charging)'
}

def time [] { date now |format date '%a %F %H:%M:%S' }

