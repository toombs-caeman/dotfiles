#!/bin/bash
# a bash library
#|  .__.
#|  (o,o)
#|  /)__)      v
#|__,,_,,_____/
#=#==-==----##=--<
#            )
#            ^

# import with `. "$(lib)"` if it's on your $PATH
# also works with zsh if `emulate ksh; setopt bashrematch`, which it will set if sourced.

# COMMENTS
# Comments conform to the following style.
# a function, builtin, or command 'foo' is called foo().
# a scalar variable 'foo' is called $foo.
# an array variable 'foo' is called $foo[].
# a flag 'foo' is called --foo. a flag 'f' is called -f
# Code is written in `backticks`, but $(subshells) are always preferred in real code
# foo*() means any function whose name starts with 'foo', including foo()


# Sorry not sorry. Need to widen the compatibility between zsh and bash.
if [ -n "$ZSH_VERSION" ]; then
    emulate ksh; setopt bashrematch nolocaloptions
else
    # if we're not sourced, return the name of this file and exit
    # if sourced by bash, `$0=*bash`, if sourced by zsh `$0=*lib` but $BASH_SOURCE isn't set
    if [ "${0##*/}" = "lib" ] && [ -n "$BASH_SOURCE" ]; then
        echo "$BASH_SOURCE"
        exit
    fi
fi

escape_html() { local s="${*//&/&amp\;}"; s="${s//</&lt\;}"; s="${s//>/&gt\;}"; printf '%s' "${s//"\""/&quot\;}"; }

# pop <array> <var>
# pop the last value of an array, optionally to var
pop() { : "$1[-1]"; eval "printf ${2:+-v} $2 %s \"\${$_}\"; [ -n \"\$ZSH_VERSION\" ] && $_=() || unset -v $_"; }

func() { # working with shell functions
  case "$1" in
    ls) declare -f + || declare -F | cut -d' ' -f 3 ;;
    cp) test -n "$(declare -f "$2")" && eval "${_/$2/$3}" ;;
    rm) unset -f "$2" ;;
    mv) func cp "$2" "$3"; func rm "$2" ;;
  esac
}
# FUNCTION
fls() { declare -f + || declare -F | cut -d' ' -f 3 ; }
fcp() { test -n "$(declare -f "$1")" && eval "${_/$1/$2}" ; }
frm() { unset -f "$1"; }
fmv() { fcp "$1" "$2"; frm "$1"; }

M() { unset -v "${3:-M}"; [[ "$1" =~ $2 ]] && eval "${3:-M}=(\"\${BASH_REMATCH[@]}\")"; }

# OPT
# opt() generates a script that parses arguments.
# example: `eval "$(opt x y z: job,j='a job' -d 'foo description')"`
# in this example, $x will be set to 1 if -x is passed. Same with $y. -z must be passed and takes an argument.
# $job will be set to its argument if --job or -j is passed, otherwise it will have the value 'a job'
# if -h or --help is passed, 'foo description' will be used as a description in the help text.
# if opt() is passed --nargs, positional arguments are disallowed.
# if opt() is passed --nohelp, -h|--help flags won't be generated
# TODO `local help="$help"` to allow message to leak in, then include the above in help
# TODO optional 'local' on -n ${FUNCNAME[1]:-${funcstack[1]}} to use at top level scripts
opt() {
  local description='generate a script that parses arguments'
  # recurse to process our own arguments
  if [ -- != "$1" ]; then eval "$(opt -- description,d="no description found" nargs nohelp)"; else shift; fi
  local vars=() cases=() required=() names=() sed=''
  # generate variable names and cases from arguments
  sed='s/^\([^,:=]*\)/\1,\1/;s/,/|--/g;s/-\(.\)\([:=|]\|$\)/\1\2/g;s/|/ /;' # 'a,bc,d=' -> 'a -a|--bc|-d='
  sed=$sed'/\(:\|=\)$/!{s/\([^ ]*\) \(.*\)/\1 \2) \1=1/;};' # 'a -b|-c' -> 'a -b|-c) a=1'
  sed=$sed'/\(:\|=\)$/{s/.$/)/;s/\([^ ]*\) \(.*\)/\1 \2 shift\;\1=\$1/;};' # 'a -b|-c:' -> 'a -b|-c) shift;a=$1'
  while M "$1" '^(.[^=:]*)(=(.*)|:)?$'; do # M (names list)(flag + value)(value)
      v="$(sed "$sed" <<< "${M[1]}${M[2]:0:1}")" vars+=("${v%% *}" "${M[3]}") cases+=("${v#* }")
      [ "${M[2]}" = : ] && required+=("${v%% *}")
      shift
  done
  (( $# )) && printf 'malformed opt definition: "%s"\n' "$1" >&2 && return 1
  local help="echo ${FUNCNAME[1]:-${funcstack[1]}}: $(printf '%q' "$description") >&2"
  (( nohelp )) || cases+=("-h|--help) $help; return")
  cases+=('--) shift;__opt_args+=("$@"); break')
  cases+=("-*) echo ${FUNCNAME[1]:-${funcstack[1]}}: unrecognized flag "\$1"; $help; return 1")
  cases+=('*) __opt_args+=("$1")')
  printf 'local __opt_args=();\n'
  if (( ${#vars[@]} )); then
    printf -v vars ' %s=%q' "${vars[@]}"
    printf 'local %s;\n' "$vars"
  fi
  fmt ' %s ;;\n%F %jwhile (( $# )); do case "$1" in\n%sesac; shift; done;\n' "${cases[@]}"
  fmt 'set -- "${__opt_args[@]}"\n'
  if (( ${#required[@]} )); then
    fmt ' %jfor __opt_args in %s; do\n' "${required[@]}"
    fmt ' if [ -z "${!__opt_args}" ]; then echo missing arg "$__opt_args"; %s; return 1; fi\ndone\n' "$help"
  fi
  printf 'unset __opt_args\n'
  (( nargs )) && printf 'if (( $# )); then echo positional arguments not allowed; %s; return 1; fi;' "$help"
}

fmt() {
    # -v output var
    # -V use var as in and output
    # %T tput cache
    # %w/%W where/filter_out (where)
    # %F format, assumed final
    # %j/%J join/split
    # %M match (must be followed by %F
    # %S sort with flags
    if ! (($#)); then
        # update cache
        # Black Red Green Yellow blUe Magenta Cyan White
        declare -Ag fmt=()
        fmt[--]="$(tput sgr0)"; local f b c=(b r g y u m c w B R G Y U M C W) dat=()
        fmt -v dat "%T--%J" "$(printf '%s\nsgr0\n' seta{f,b}\ {0..15} smul dim bold cuu1 cud1 cub1 cuf1 | tput -S)"
        for f in {0..15}; do fmt[${c[$f]}-]="${dat[$f]}" fmt[-${c[$f]}]="${dat[$f+16]}"; done
        for f in "${c[@]}"; do for b in "${c[@]}"; do fmt[$f$b]="${fmt[${f}-]}${fmt[-$b]}"; done; done
        #  underline dim bold
        fmt[__]="${dat[32]}" fmt[..]="${dat[33]}" fmt[**]="${dat[34]}"
        # cursor codes: move one up, down, left, or right
        fmt[u1]="${dat[35]}" fmt[d1]="${dat[36]}" fmt[l1]="${dat[37]}" fmt[r1]="${dat[38]}"
        return
    fi
    local __ # use as reply
    case "$1" in
        -V) eval "_fmt \"\$3\" \"\${$2[@]}\" \"\${@:4}\""; eval "$2=(\"\${__[@]}\")" ;;
        -v) _fmt "${@:3}"; eval "$2=(\"\${__[@]}\")" ;;
        *)  _fmt "$@"; printf %s "${__[@]}" ;;
    esac
    ((${#__[@]}))
    return
}
_fmt() {
    local x y spec="$1"; shift
    y='(^|[^%])%((%%)*)T(..)'
    while [[ "$spec" =~ $y ]]; do
        x="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${fmt[pp]}${fmt[${BASH_REMATCH[4]}]}${fmt[qq]}"
        spec="${spec/"${BASH_REMATCH[0]}"/"$x"}"
    done
    if ! (($#)); then
        printf -v __ "$spec"
        return
    fi
    # match any character, but not an empty string. if there's an unescaped section flag, only match up to there.
    local section flag flags='rwWjJMFS'
    local getsection="^(([^%]|%[^$flags])*)((^|[^%])%((%%)*)([$flags]))?"
    while [[ "$spec" =~ $getsection ]]; do
        section="${BASH_REMATCH[1]}${BASH_REMATCH[4]}${BASH_REMATCH[5]}" flag="${BASH_REMATCH[7]}"
        spec="${spec#"${BASH_REMATCH[0]}"}"
        #echo "flag='$flag' section='$section' remainder='$spec'"
        case "$flag" in
            r) # repeat
                local _ x=()
                printf -v y '%*s' "$section"
                y="${y// /y }"
                while (($#)); do for _ in $y; do x+=("$1"); done; shift; done
                set -- "${x[@]}" ;;
            w|W) # filter
                [ "$flag" = w ]; local invert=$? x=()
                while (($#)); do [[ $1 =~ $section ]]; [ $invert = $? ] && x+=("$1"); shift; done
                set -- "${x[@]}" ;;
            j) # join
                unset -v x; printf -v x "%s${section//"%"/%%}" "$@"; set -- "${x%"$section"}" ;;
            J) # split
                x=()
                if [ -n "$section" ]; then
                    for y in "$@"; do
                        while ((${#y})); do x+=("${y%%"$section"*}") y="${y#"${x[-1]}"}" y="${y#"$section"}"; done
                    done
                else
                    # https://stackoverflow.com/a/34634535
                    for y in "$@"; do [[ "$y" =~ ${y//?/(.)} ]]; x+=("${BASH_REMATCH[@]:1}"); done
                fi
                set -- "${x[@]}" ;;
            S) # sort
                x=(); while IFS= read -r -d $'\0' y; do x+=("$y"); done < <(printf '%s\0' "$@"|sort -z$section)
                set -- "${x[@]}" ;;
            M) # match
                unset -v BASH_REMATCH
                [[ "$spec" =~ $getsection ]] || echo "match fail"
                local mformat="${BASH_REMATCH[1]}${BASH_REMATCH[4]}${BASH_REMATCH[5]}"
                #flag="${BASH_REMATCH[6]}"
                spec="${spec#"${BASH_REMATCH[0]}"}"
                x=()
                while [[ "$mformat" =~ %([0-9]*)m ]]; do
                    x+="${BASH_REMATCH[1]:-0}"
                    mformat="${mformat/"${BASH_REMATCH[0]}"/%}"
                done
                #echo "mformat='$mformat' x='${x[@]}'"
                local args=("$@") a i
                for ((a=0; a<${#args[@]}; a++)); do
                    if [[ "${args[$a]}" =~ ${section} ]]; then
                        y=(); for i in ${x[@]}; do y+="${BASH_REMATCH[$i]}"; done
                        printf -v args[$a] "$mformat" "${y[@]}"
                    fi
                done
                set -- "${args[@]}" ;;
            *) # format, assumed if final flag isn't given
                [ -n "$section" ] || break
                unset -v y; x=(); for y in "$@"; do printf -v y "$section" "$y"; x+=("$y"); done
                set -- "${x[@]}" ;;
        esac
    done
    __=("$@")
}

# populate cache right away if we need to.
# we won't if this file gets sourced multiple times
if !  (( ${#fmt[@]} )); then
    fmt
fi


# MO
mo() {
    # http://mustache.github.io/mustache.5.html
    # {{#var}}block{{/var}} - for each in array
    # {{^var}}block{{/var}} - if not var, unset or var=()
    # {{! comment }} - ignored
    # {{&var}} - "${var[*]}"
    # {{var}} - escape_html "${var[*]}"
    # {{> partial }} - mo "$partial"
    eval "`opt -d "moustache templater"`"
    local __t __raw="$(cat "$@"; printf x)"; set --; # tokenize raw text into $@
    while M "$__raw" '^(([^{]|\{[^{])*)\{\{([^}]*)\}\}' __t; do
        set -- "$@" "${__t[1]}" "${__t[3]// }"; __raw="${__raw/"${__t[0]}"}"
    done
    set -- "$@" "${__raw%x}";
    unset -v __t __raw # reuse __t as tag stack and __raw as body
    while (( $# )); do
        if (( $# % 2 )); then (( ${#__t[@]} )) && __raw+="$1" || printf '%s' "$1"; shift; continue; fi # $1 is body
        if (( ${#__t[@]} )) && ! [[ "#^/" =~ "${1:0:1}" ]]; then __raw+="{{$1}}"; shift; continue; fi # shortciruit var
        case "${1:0:1}" in
            \#) ((${#__t[@]})) && __raw+="{{$1}}" && __t=("$1" "${__t[@]}") || __t=("$1") ;;
            ^)  ((${#__t[@]})) && __raw+="{{$1}}" && __t=("$1" "${__t[@]}") || __t=("$1") ;;
            /) # section closing tag
                [ "${__t[0]#?}" != "${1#?}" ] && printf '%s\n' "mismatched tags '${__t[0]}' != '$1'" >&2 && return 1
                if [ ${#__t[@]} = 1 ]; then case "${__t[0]}" in
                        \#*) eval "for tag in \"\${${1#?}[@]}\"; do printf '%s' \"\$__raw\" | mo || return; done" ;;
                        ^*) eval "((\${#${1#?}[@]})) || printf '%s' \"\$__raw\" | mo || return" ;;
                    esac; __raw=''; else __raw+="{{$1}}"; fi; __t=("${__t[@]:1}") ;;
            \>) mo -- "${1#?}" || return ;; # partial
            !)  ;; # comment
            \&*) eval "printf '%s' \"\${${1#&}[*]}\"" ;; # raw value
            *) eval "escape_html \"\${$1[@]}\"" ;; # escaped value
        esac
        shift
    done
    if (( ${#__t[@]} )); then
        fmt '"%s"%F, %junclosed tag (%s)\n' "${__t[@]}" >&2
        return 1
    fi
}

# TUI?

# CURSOR
# read cursor position
puc=(0 0)
puc() { local _; echo -ne $'\E[6n'; read -s -d\[ _; IFS=';' read -sdR puc[0] puc[1]; puc[0]=$((puc[0]-1)); puc[1]=$((puc[1]-1)); }
# cursor stack
pushc() { puc; puc+=("${puc[@]:0:2}"); }
popc() { pop puc puc[1]; pop puc puc[0]; tput cup "${puc[@]:0:2}"; }

# BOX DRAWING
boxchar=( \
    ' ' '╵' '╹' ' ' '╶' '└' '┖' '╙' '╺' '┕' '┗' ' ' ' ' '╘' ' ' '╚' \
    '╷' '│' '╿' ' ' '┌' '├' '┞' ' ' '┍' '┝' '┡' ' ' '╒' '╞' ' ' ' ' \
    '╻' '╽' '┃' ' ' '┎' '┟' '┠' ' ' '┏' '┢' '┣' ' ' ' ' ' ' ' ' ' ' \
    ' ' ' ' ' ' '║' '╓' ' ' ' ' '╟' ' ' ' ' ' ' ' ' '╔' ' ' ' ' '╠' \
    '╴' '┘' '┚' '╜' '─' '┴' '┸' '╨' '╼' '┶' '┺' ' ' ' ' ' ' ' ' ' ' \
    '┐' '┤' '┦' ' ' '┬' '┼' '╀' ' ' '┮' '┾' '╄' ' ' ' ' ' ' ' ' ' ' \
    '┒' '┧' '┨' ' ' '┰' '╁' '╂' ' ' '┲' '╆' '╊' ' ' ' ' ' ' ' ' ' ' \
    '╖' ' ' ' ' '╢' '╥' ' ' ' ' '╫' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' \
    '╸' '┙' '┛' ' ' '╾' '┵' '┹' ' ' '━' '┷' '┻' ' ' ' ' ' ' ' ' ' ' \
    '┑' '┥' '┩' ' ' '┭' '┽' '╃' ' ' '┯' '┿' '╇' ' ' ' ' ' ' ' ' ' ' \
    '┓' '┪' '┫' ' ' '┱' '╅' '╉' ' ' '┳' '╈' '╋' ' ' ' ' ' ' ' ' ' ' \
    ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' \
    ' ' '╛' ' ' '╝' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '═' '╧' ' ' '╩' \
    '╕' '╡' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '╪' ' ' ' ' \
    ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' \
    '╗' ' ' ' ' '╣' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '╦' ' ' ' ' ' ' '╬')
boxchar() {
    # <top> <right> <bottom> <left> <var>
    # empty=0 line=1 bold=2 double=3
    # [box characters](https://en.wikipedia.org/wiki/Box-drawing_character)
    printf ${5:+-v} $5 "${boxchar[$(($1+4*$2+16*$3+64*$4))]}"
}
box() { pushc; tput cup "$(($1+$3))" "$2"; _box "${@:3}"; popc; }
# box <sx> <sy> <style>
_box() {
    local vc hc
    boxchar "$3" 0 "$3" 0 vc
    boxchar 0 "$3" 0 "$3" hc
    pushc # save the position of the bottom left corner
    boxchar "$3" "$3" 0 0 # draw bottom left corner
    fmt "$(($1-1))%r%Tu1%Tl1%s%j%s%Tu1%Tl1" "$vc" # draw left line (moving up)
    boxchar 0 "$3" "$3" 0 # draw top left corner
    fmt "$(($2-1))%r" "$hc" # draw top line
    boxchar 0 0 "$3" "$3" # draw top right corner
    popc # back down to the bottom left
    fmt "$(($2-1))%r%j%Tr1%s" "$hc" # draw bottom line
    boxchar "$3" 0 0 "$3" # draw bottom right corner
    fmt "$(($1-1))%r%Tu1%Tl1%s" "$vc" # draw right line (moving up)
}
