#!/bin/bash
# a bash and zsh library
#|  .__.
#|  (o,o)
#|  /)__)      v
#|__,,_,,_____/
#=#==-==----##=--<
#            )
#            ^

## USAGE
# import with `. "$(lib)"` if it's on your $PATH
# read test_*() functions for examples

##COMMENTS
# Comments conform to the following style.
# a function, builtin, or command 'foo' is called foo().
# a scalar variable 'foo' is called $foo.
# an array variable 'foo' is called $foo[].
# a flag 'foo' is called --foo. a flag 'f' is called -f
# Code fragments are written in `backticks`, but $(subshells) are always preferred in real code
# foo*() means any function whose name starts with 'foo', including foo()

## DESIGN
# if foo() needs to persist state or return an array, it will use $foo or $foo[].
# foo() may have helper functions _foo*()
# _*() functions aren't intended to be called directly.
#
# __*() are completion functions that should prints a list of newline separated completion options.
# for example __foo() provides completions for foo()
#
# *__() are context specific setup functions. context is determined by q()
# for example bash__fzf__() is run if the current shell is bash and fzf is installed
# __() is always run
#
# other functions that contain '__' are considered alternative implementations.
# for example bash__log() implements log() when the current shell is bash.
#
# run rc() to re-initialize underscore functions
#
# test_*() are test cases for this library.
# run tests in bash and zsh with lib_test()


if [ -n "$ZSH_VERSION" ]; then
    emulate ksh; setopt bashrematch nolocaloptions
else
    # if we're not sourced, return the name of this file and exit
    # if sourced by bash, `$0=*bash`, if sourced by zsh `$0=*lib` but $BASH_SOURCE isn't set
    if [ "${0##*/}" = "lib" ] && [ -n "$BASH_SOURCE" ]; then
        echo "$BASH_SOURCE"
        exit
    fi
fi


## RC
rc() {
    # source a file if the context matches
    if (( $# )); then q "${@:2}" && . "$1"; return $?; fi
    # set data for q() special cases
    # TODO find consistent way to set $TERM
    export OS="$(uname -s)" TERM="$TERM" SHELL="$(ps -p $$ -o comm=)"
    local fs=($(fun ls)) setup comp alt f x
    fmt -V fs '__%w'                   # filter only names containing '__'
    fmt -v setup '__$%w' "${fs[@]}"    # when*__()
    fmt -v comp '^__.%w' "${fs[@]}"     # __*fun()
    fmt -v alt '^__%W__$%W' "${fs[@]}" # when*__*fun()
    #fmt -V fs '^.*__(.*)$%M%1ms%Fu%S'  # fun() select only the last section of the name, then sort unique
    # as a special case, do zsh and bash setup first
    q bash && command -v bash__ &>/dev/null && bash__
    q zsh && command -v zsh__ &>/dev/null && zsh__
    for f in "${setup[@]}"; do q ${f//__/ } && "$f"; done
    for f in "${alt[@]}"; do x="${f%__*}"; q ${x//__/ } && fun cp "$f" "${f#*__}"; done
    # TODO what about config sensitive completions?
    # TODO _fzf_setup_completion https://github.com/junegunn/fzf#supported-commands autogen for __*()
    for f in "${comp[@]}"; do
        q bash && complete -F _rc "${f##*__}"
        q zsh && eval _$f'() { emulate ksh; reply=(${(f)"$('$f')"}); }' && compctl -K "_$f" "${f##*__}"
    done
    return 0
}
_rc() { local words=("${COMP_WORDS[@]}") CURRENT="$((COMP_CWORD + 1))"; COMPREPLY=($(compgen -W "$(__$1)" "$2")); }
q() {  # query the current os, terminal, or shell, or if commands are present in $PATH
    local os term shell q=()
    while (( $# )); do
        # TODO add local/remote special case to handle ssh/mosh/rrc
        # TODO add xterm-256color special case
        case "$1" in
            mac)    os=Darwin ;; nix)   os=Linux  ;;
            iterm)  term=iterm;; xterm) term=xterm;;
            zsh)    shell=zsh ;; bash)  shell=bash;;
            *) q+=("$1") ;;
        esac
        shift
    done
    [ "$OS" = "${os:-$OS}" ] && [ "$TERM" = "${term:-$TERM}" ] && [ "${SHELL##*/}" = "${shell:-${SHELL##*/}}" ] &&
        command -v "${q[@]:-command}" > /dev/null || return 1
}

## LOGGING
zsh__log() { printf '%s %s\n' "${funcfiletrace[0]%:*}:${funcstack[1]}:${funcfiletrace[0]##*:}" "$*" >&2; }
bash__log() { printf '%s %s\n' "${BASH_SOURCE[1]}:${FUNCNAME[1]}:${BASH_LINENO[0]}" "$*" >&2; }

## TEST
# this is a mini test framework that runs tests in both bash and zsh
# functions test_*() are unit tests
# tests are also defined for the library itself
# TODO nicer reporting, be silent and collect stdout/stderr until something goes wrong
lib_test() { for shell in bash zsh; do echo $'\n'"$shell"; "$shell" -c '. "$(lib)"; _lib_test'; done; echo; }
_lib_test() { for tc in $(fun ls|grep -o 'test_[^ ]*$'); do "$tc"; done; }
fail() { echo "FAIL ${funcstack[${2:-1}]}${FUNCNAME[${2:-1}]}: ${BASH_LINENO[$((${2:-1}-1))]} ${1:-just aint right}"; }
assert() {
    eval "set -- \"\$@\" \${#$1[@]}"
    eval "(( $3 > \${#$2[@]} ))" && fail 'output array too short' 2
    eval "(( $3 < \${#$2[@]} ))" && fail 'output array too long' 2
    local __
    for ((__=0; __ < $3; __++)); do
        eval "[[ \"\${$1[$__]}\" != \"\${$2[$__]}\" ]] && fail \"idx $__: '\${$1[$__]}' != '\${$2[$__]}'\" 2" && return;
    done
}


escape_html() { local s="${*//&/&amp\;}"; s="${s//</&lt\;}"; s="${s//>/&gt\;}"; printf '%s' "${s//"\""/&quot\;}"; }

# pop <array> [<var>]
# pop the last value of an array, optionally store to var. return 1 if array is empty
# this mirrors `array+=("$var")` as push
#pop() { : "$1[-1]"; eval "((\${#$1[@]}))||return 1; printf ${2:+-v} $2 %s \"\${$_}\"; [ -n \"\$ZSH_VERSION\" ] && $_=() || unset -v $_"; }
zsh__pop() {  ((${#${(P)1}[@]}))||return 1; printf ${2:+-v} $2 %s "${${(P)1}[-1]}"; eval "$1[-1]=()"; }
bash__pop() { : "$1[-1]"; printf ${2:+-v} $2 %s "${!_}" 2>/dev/null || return 1; unset -v "$1[-1]"; }

defer=()
defer() {
    local x; printf -v x '%q ' "$@"
    defer+=("$x")
    # TODO detect if there's alreay a trap on exit and keep it on the stack (unless it's `_defer`)
    trap "_defer" EXIT
}
_defer() {
    local x
    while pop defer x; do eval "$x"; done
}
# TODO make similar functions for other signals

fun() { # working with shell functions
  case "$1" in
    ls) declare -f + || declare -F | cut -d' ' -f 3 ;;
    cp) test -n "$(declare -f "$2")" && eval "${_/$2/$3}" ;;
    rm) unset -f "$2" ;;
    mv) fun cp "$2" "$3"; fun rm "$2" ;;
    *) echo "unrecognized method '$1'" >&2; return 1 ;;
  esac
}

# M <text> <pattern> [<match var=M>]
M() { unset -v "${3:-M}"; [[ "$1" =~ $2 ]] && eval "${3:-M}=(\"\${BASH_REMATCH[@]}\")"; }
# TODO memo() to add memoization
# TODO performance test named capture groups
# this is equivalent to M() above, but supports perl style named capture groups
# the blog repo contains a memo-ized version
M() { # <text> <pattern> [<match var=M>]
    unset -v "${3:-M}"
    set -- "$1" "$2" '\(\?P<([^>]*)>' "${3:-M}=(\"\${BASH_REMATCH[@]}\")"
    while [[ "$2" =~ $3 ]] ; do
        : "${2%%"${BASH_REMATCH[0]}"*}"; : "${_//'\('/}"; : "${_//[^(]/}"
        set -- "$1" "${2//"${BASH_REMATCH[0]}"/(}" "${@:3}" "${BASH_REMATCH[1]}=\"\${BASH_REMATCH[$((${#_} + 1))]}\""
    done
    [[ "$1" =~ $2 ]] || return 1
    shift 3
    while (($#)); do eval "$1"; shift; done
}
#N 'abx(y' 'b((?P<x>.)\((?P<y>.?))' V
#M '<p .class>' '<(?P<x>[[:alnum:]]+)(?P<raw_attr>([^>]?[^->])*)(?P<line>-?)>' V
#printf '%s\n' "${V[@]}"


# OPT
# TODO this was probably a bad idea
# opt() generates a script that parses arguments.
# example: `eval "$(opt x y z: job,j='a job' -d 'foo description')"`
# in this example, $x will be set to 1 if -x is passed. Same with $y. -z must be passed and takes an argument.
# $job will be set to its argument if --job or -j is passed, otherwise it will have the value 'a job'
# if -h or --help is passed, 'foo description' will be used as a description in the help text.
# if opt() is passed --nargs, positional arguments are disallowed.
# if opt() is passed --nohelp, -h|--help flags won't be generated
# TODO `local help="$help"` to allow message to leak in, then include the above in help
# TODO optional 'local' on -n ${FUNCNAME[1]:-${funcstack[1]}} to use at top level scripts
opt() {
  local description='generate a script that parses arguments'
  # recurse to process our own arguments
  if [ -- != "$1" ]; then eval "$(opt -- description,d="no description found" nargs nohelp)"; else shift; fi
  local vars=() cases=() required=() names=() sed=''
  # generate variable names and cases from arguments
  # TODO eval "y=({$x})"
  sed='s/^\([^,:=]*\)/\1,\1/;s/,/|--/g;s/-\(.\)\([:=|]\|$\)/\1\2/g;s/|/ /;' # 'a,bc,d=' -> 'a -a|--bc|-d='
  sed=$sed'/\(:\|=\)$/!{s/\([^ ]*\) \(.*\)/\1 \2) \1=1/;};' # 'a -b|-c' -> 'a -b|-c) a=1'
  sed=$sed'/\(:\|=\)$/{s/.$/)/;s/\([^ ]*\) \(.*\)/\1 \2 shift\;\1=\$1/;};' # 'a -b|-c:' -> 'a -b|-c) shift;a=$1'
  while M "$1" '^(.[^=:]*)(=(.*)|:)?$'; do # M (names list)(flag + value)(value)
      v="$(sed "$sed" <<< "${M[1]}${M[2]:0:1}")" vars+=("${v%% *}" "${M[3]}") cases+=("${v#* }")
      [ "${M[2]}" = : ] && required+=("${v%% *}")
      shift
  done
  (( $# )) && printf 'malformed opt definition: "%s"\n' "$1" >&2 && return 1
  local help="echo ${FUNCNAME[1]:-${funcstack[1]}}: $(printf '%q' "$description") >&2"
  (( nohelp )) || cases+=("-h|--help) $help; return")
  cases+=('--) shift;__opt_args+=("$@"); break')
  cases+=("-*) echo ${FUNCNAME[1]:-${funcstack[1]}}: unrecognized flag "\$1"; $help; return 1")
  cases+=('*) __opt_args+=("$1")')
  printf 'local __opt_args=();\n'
  if (( ${#vars[@]} )); then
    printf -v vars ' %s=%q' "${vars[@]}"
    printf 'local %s;\n' "$vars"
  fi
  fmt ' %s ;;\n%F %jwhile (( $# )); do case "$1" in\n%sesac; shift; done;\n' "${cases[@]}"
  fmt 'set -- "${__opt_args[@]}"\n'
  if (( ${#required[@]} )); then
    fmt ' %jfor __opt_args in %s; do\n' "${required[@]}"
    fmt ' if [ -z "${!__opt_args}" ]; then echo missing arg "$__opt_args"; %s; return 1; fi\ndone\n' "$help"
  fi
  printf 'unset __opt_args\n'
  (( nargs )) && printf 'if (( $# )); then echo positional arguments not allowed; %s; return 1; fi;' "$help"
}


test_fmt_F() {
    fmt -v r '%s %s%F(%s)' {1..7}
    e=('(1 2)' '(3 4)' '(5 6)' '(7 )')
    assert e r
    fmt -v r '%s%.0s' {1..7}
    e=('1' '3' '5' '7')
    assert e r
}
test_fmt_jJ() {
    fmt -v r '"%s"%F, %j' {1..3}
    e=('"1", "2", "3"')
    assert e r
    fmt -V r ', %J'
    e=('"1"' '"2"' '"3"')
    assert e r
    fmt -v r '%J' 'abc'
    e=(a b c)
    assert e r
}
test_fmt_wW() {
    fmt -v r 'x%w' {1..3}{x,y}
    e=(1x 2x 3x)
    assert e r
    fmt -v r 'x%W' {1..3}{x,y}
    e=(1y 2y 3y)
    assert e r
}
test_fmt_r() {
    fmt -v r '3%r' 1 2
    e=(1 1 1 2 2 2)
    assert e r
}
test_fmt_R() {
    fmt -v r '%R' {1..5}
    e=({5..1})
    assert e r
}
# TODO test %% escaping
test_fmt_Z() {
    r=(1 3 5 2 4 6)
    fmt -V r '2%Z'
    e=({1..6})
    assert e r
}
test_fmt_MF() {
    fmt -v r '([0-9]+)%M%1ms' xx{1..3}0y a b
    e=({1..3}0 a b)
    assert e r
}
test_fmt_SuS() {
    fmt -v r '%S' 4 3 5 3
    e=(3 3 4 5)
    assert e r
    fmt -v r 'u%S' 4 3 5 3
    e=(3 4 5)
    assert e r
}

# TODO %C count occurrences of literal
# TODO -i input array, repeatable?
fmt() { # [-v <out_var> | -V <in_out_var>] <pattern> [<value1> <value2> ...]
    # %T.. tput cache
    # %w/%W where/filter_out (where)
    # %F format, assumed final
    # %j/%J join/split
    # %M match (must be followed by %F)
    # %S sort with flags
    if [[ -n "$ZSH_VERSION" && ! -o ksharrays ]]; then
        # for some reason, if this is called within a completion function then these options need to be re-set
        emulate ksh; setopt bashrematch;
    fi
    if ! (($#)); then
        # update cache
        # Black Red Green Yellow blUe Magenta Cyan White
        declare -Ag fmt=()
        fmt[--]="$(tput sgr0)"; local f b c=(b r g y u m c w B R G Y U M C W) dat=()
        fmt -v dat "%T--%J" "$(printf '%s\nsgr0\n' seta{f,b}\ {0..15} smul dim bold cuu1 cud1 cub1 cuf1 | tput -S)"
        for f in {0..15}; do fmt[${c[$f]}-]="${dat[$f]}" fmt[-${c[$f]}]="${dat[$f+16]}"; done
        for f in "${c[@]}"; do for b in "${c[@]}"; do fmt[$f$b]="${fmt[${f}-]}${fmt[-$b]}"; done; done
        #  underline dim bold
        fmt[__]="${dat[32]}" fmt[..]="${dat[33]}" fmt[**]="${dat[34]}"
        # cursor codes: move one up, down, left, or right
        fmt[u1]="${dat[35]}" fmt[d1]="${dat[36]}" fmt[l1]="${dat[37]}" fmt[r1]="${dat[38]}"
        return
    fi
    local __ # use as reply
    case "$1" in
        -V) eval "_fmt \"\$3\" \"\${$2[@]}\" \"\${@:4}\""; eval "$2=(\"\${__[@]}\")" ;;
        -v) _fmt "${@:3}"; eval "$2=(\"\${__[@]}\")" ;;
        *)  _fmt "$@"; printf %s "${__[@]}" ;;
    esac
    ((${#__[@]}))
    return
}
_fmt() {
    local x y='(^|[^%])%((%%)*)T(..)' spec="$1"; shift
    while [[ "$spec" =~ $y ]]; do
        x="${BASH_REMATCH[1]}${BASH_REMATCH[2]}${fmt[pp]}${fmt[${BASH_REMATCH[4]}]}${fmt[qq]}"
        spec="${spec/"${BASH_REMATCH[0]}"/"$x"}"
    done
    if ! (($#)); then
        printf -v __ "$spec"
        return
    fi
    local getsection="(^|[^%])(%([rRwWjJMFSZ]))"
    while [[ -n "$spec" ]]; do
        if [[ "$spec" =~ $getsection ]]; then
            section="${spec%%"${BASH_REMATCH[0]}"*}${BASH_REMATCH[1]}"
            spec="${spec#*"${BASH_REMATCH[0]}"}"
            flag="${BASH_REMATCH[3]}"
        else
            section="$spec"
            spec=''
            flag="F"
        fi
        #echo ">$section<>$flag<>$spec<"
        x=()
        case "$flag" in
            R) # reverse
                eval 'x=("${(Oa)@}")' 2>/dev/null || while (($#)); do x=("$1" "${x[@]}"); shift; done
                set -- "${x[@]}" ;;
            r) # repeat
                printf -v y '%*s' "$section"; y="${y// /y }"
                while (($#)); do for _ in $y; do x+=("$1"); done; shift; done
                set -- "${x[@]}" ;;
            w|W) # filter
                [ "$flag" = w ]; local invert=$? x=()
                while (($#)); do [[ "$1" =~ $section ]]; [ $invert = $? ] && x+=("$1"); shift; done
                set -- "${x[@]}" ;;
            j) # join
                unset -v x; printf -v x "%s${section//"%"/%%}" "$@"; set -- "${x%"$section"}" ;;
            J) # split
                x=()
                if [ -n "$section" ]; then
                    for y in "$@"; do
                        while ((${#y})); do x+=("${y%%"$section"*}") y="${y#"${x[-1]}"}" y="${y#"$section"}"; done
                    done
                else
                    # https://stackoverflow.com/a/34634535
                    for y in "$@"; do [[ "$y" =~ ${y//?/(.)} ]]; x+=("${BASH_REMATCH[@]:1}"); done
                fi
                set -- "${x[@]}" ;;
            S) # sort
                x=(); while IFS= read -r -d $'\0' y; do x+=("$y"); done < <(printf '%s\0' "$@"|sort -z$section)
                set -- "${x[@]}" ;;
            M) # match
                local pattern="$section"
                if [[ "$spec" =~ $getsection ]]; then
                    section="${spec%%"${BASH_REMATCH[0]}"*}${BASH_REMATCH[1]}"
                    spec="${spec#*"${BASH_REMATCH[0]}"}"
                    flag="${BASH_REMATCH[3]}"
                else
                    section="$spec"
                    spec=''
                    flag="F"
                fi
                #echo "!$section<>$flag<>$spec<"
                # TODO if flag isn't empty or F, then spec is malformed
                x=()
                while [[ "$section" =~ %([0-9]*)m ]]; do
                    x+=("${BASH_REMATCH[1]:-0}")
                    section="${section/"${BASH_REMATCH[0]}"/%}"
                done
                local args=("$@") a i
                for ((a=0; a<${#args[@]}; a++)); do
                    if [[ "${args[$a]}" =~ $pattern ]]; then
                        y=(); for i in ${x[@]}; do y+="${BASH_REMATCH[$i]}"; done
                        printf -v args[$a] "$section" "${y[@]}"
                    fi
                done
                set -- "${args[@]}" ;;
            Z) # zip
                # TODO this works as intended, but it's a bit obscure??
                local input=("$@") output=()
                local sx="${section:-2}"
                local sy=$(($#/sx))
                local x y
                for ((y=0; y < sy; y++)); do
                    for ((x=0; x < sx; x++)); do
                        #echo "output[$((sx*y+x))]='${input[$((sy*x+y))]}'"
                        output[$((sx*y+x))]="${input[$((sy*x+y))]}"
                    done
                done
                set -- "${output[@]}" ;;
            *) # format, assumed if final flag isn't given
                [ -n "$section" ] || break
                x=()
                if [ -n "$ZSH_VERSION" ]; then
                    printf -v x "$section" "$@"
                else
                    mapfile -d '' x < <(printf "$section\0" "$@")
                fi
                set -- "${x[@]}" ;;
        esac
    done
    __=("$@")
}

# populate cache right away if we need to.
# we won't if this file gets sourced multiple times
if ! ((${#fmt[@]})); then fmt; fi

rc
