#!/usr/bin/env python3
import os
import random

import yaml
import jinja2 as jj
import argparse
import subprocess
from color import background_to_scheme, color_names

warning ='DO NOT EDIT!! created with ricer template:%s'

def normalize_paths(m):
    for k, v in m.items():
        if type(v) is str and k not in ('callback','when'):
            m[k] = os.path.abspath(os.path.expanduser(v))
        if type(v) is dict:
            m[k] = normalize_paths(v)
    return m


def get_conf(tmplfile):
    try:
        with open(tmplfile, 'r') as stream:
            r = yaml.safe_load(stream)
            for k, v in r['templates'].items():
                if type(v) is str:
                    r['templates'][k] = { 'dest': v}
            return normalize_paths(r)
    except yaml.YAMLError as ex:
        print(ex)
        exit(1)

def render(conf, background, colors):
    print(colors)
    jjenv = jj.Environment(autoescape=True,
                           loader=jj.FileSystemLoader(conf['template_dir']))
    for name, value in conf['templates'].items():
        try:
            if 'when' in value.keys():
                if subprocess.call(['sh','-c',value['when']]):
                    print('%s - skipped' % name)
                    continue
            print(name)
            template = jjenv.get_template(name)
            output = template.render(
                color=list(colors[n] for n in color_names),
                background=background,
                msg=warning % (conf['template_dir'] + "/" + name),
                trueblack='000000',
                truewhite='ffffff',
                **colors,
            )
            with open(value['dest'], "w") as f:
                f.write(output)
            if 'link' in value.keys():
                subprocess.call(['mkdir', '-p', os.path.dirname(value['link'])])
                subprocess.call(['ln', '-sf', value['dest'], value['link']])
            if 'callback' in value.keys():
                subprocess.call(['sh', '-c',value['callback']])
        except Exception as ex:
            print(ex)


# list files recursively given a directory
def lsR(d):
    # https://stackoverflow.com/questions/19309667/recursive-os-listdir
    return [os.path.join(dp, f) for dp, dn, fn in os.walk(os.path.expanduser(d)) for f in fn]


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='generate themes from images and template config files with jinja2')
    parser.add_argument('config_file', help='the yaml configuration')
    parser.add_argument('-f', metavar='FILE', dest='image', help='the background image to use')
    parser.add_argument('--default', dest='default', action='store_true', help='use the default theme (solarized dark)')
    args = parser.parse_args()

    conf = get_conf(args.config_file)
    background = ''
    if args.image is not None:
        background = os.path.abspath(args.image)
    else:
        f = lsR(conf['background_dir'])
        if len(f):
            background = os.path.abspath(
                random.choice(f))
        else:
            print('no images found in %s : using default colorscheme' % conf['background_dir'])

    render(conf, background, background_to_scheme(None if args.default else background))
